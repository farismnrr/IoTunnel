{
	"info": {
		"_postman_id": "a62a28d5-b452-441b-b588-66c97e982fa7",
		"name": "IoTunnel API V1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37416429"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "[No Test] Requirements",
					"item": [
						{
							"name": "Send OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.environment.set('otpCodeAdminNana', responseJson.data.otp_code);\r",
											"} catch (error) {\r",
											"  console.log(\"Error occurred: \" + error.message);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('emailAdminNana', `sabnaamar${Date.now()}@gmail.com`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailAdminNana}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/{{version}}/admins/otp/register",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"{{version}}",
										"admins",
										"otp",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Admin Nana",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.environment.set('idAdminNana', responseJson.data.admin_id);\r",
											"} catch (error) {\r",
											"  console.log(\"Error occurred: \" + error.message);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"first_name\": \"Sabna\",\r\n    \"last_name\": \"Amar\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailAdminNana}}\",\r\n    \"otp_code\": \"{{otpCodeAdminNana}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/{{version}}/admins",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"{{version}}",
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Reset Password OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.environment.set('otpCodeAdminNana', responseJson.data.otp_code);\r",
											"} catch (error) {\r",
											"  console.log(\"Error occurred: \" + error.message);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailAdminNana}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/{{version}}/admins/otp/reset",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"{{version}}",
										"admins",
										"otp",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Admin Nana",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.environment.set('idAdminNana', responseJson.data.admin_id);\r",
											"    pm.environment.set('accessTokenAdminNana', responseJson.data.access_token);\r",
											"    pm.environment.set('refreshTokenAdminNana', responseJson.data.refresh_token);\r",
											"} catch (error) {\r",
											"    console.log(\"Error occurred: \" + error.message);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailAdminNana}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/{{version}}/admins/login",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"{{version}}",
										"admins",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Send OTP with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send OTP with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"\r",
									"  pm.expect(responseJson.status).to.equal('success');\r",
									"  pm.expect(responseJson.message).to.equal('OTP sent to email');\r",
									"  pm.expect(responseJson.data).to.have.property('otp_code');\r",
									"  pm.expect(responseJson.data.otp_code).to.be.a('number');\r",
									"\r",
									"  pm.environment.set('otpCodeAdminFaris', responseJson.data.otp_code);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('emailAdminFaris', `farismnrr${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin with Invalid Otp Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"otp_code\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin with Invalid Otp Code Credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"otp_code\": \"{{notFoundOtp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin with Valid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Admin successfully registered');\r",
									"    pm.expect(responseJson.data).to.have.property('admin_id');\r",
									"    pm.expect(responseJson.data.admin_id).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('idAdminFaris', responseJson.data.admin_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"otp_code\": \"{{otpCodeAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin with Invalid Email Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test.com\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"password\": \"*Test123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin with Not Found Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{notFoundEmail}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin with Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"}); \r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Admin successfully logged in');\r",
									"    pm.expect(responseJson.data).to.have.property('admin_id');\r",
									"    pm.expect(responseJson.data.admin_id).to.be.a('string');\r",
									"    pm.expect(responseJson.data).to.have.property('access_token');\r",
									"    pm.expect(responseJson.data.access_token).to.be.a('string');\r",
									"    pm.expect(responseJson.data).to.have.property('refresh_token');\r",
									"    pm.expect(responseJson.data.refresh_token).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('idAdminFaris', responseJson.data.admin_id);\r",
									"    pm.environment.set('accessTokenAdminFaris', responseJson.data.access_token);\r",
									"    pm.environment.set('refreshTokenAdminFaris', responseJson.data.refresh_token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Reset Password OTP with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/otp/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"otp",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Reset Password OTP with Not Found Otp Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{notFoundEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/otp/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"otp",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Reset Password OTP with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"\r",
									"  pm.expect(responseJson.status).to.equal('success');\r",
									"  pm.expect(responseJson.message).to.equal('OTP sent to email');\r",
									"  pm.expect(responseJson.data).to.have.property('otp_code');\r",
									"  pm.expect(responseJson.data.otp_code).to.be.a('number');\r",
									"\r",
									"  pm.environment.set('otpCodeAdminFaris', responseJson.data.otp_code);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/otp/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"otp",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Password with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{notFoundEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Password with Invalid Otp Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"new_password\": \"##Admin1234\",\r\n    \"retype_password\": \"##Admin1234\",\r\n    \"otp_code\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Password with Invalid Otp Code Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"new_password\": \"##Admin1234\",\r\n    \"retype_password\": \"##Admin1234\",\r\n    \"otp_code\": \"{{notFoundOtp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Password with Not Found Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{notFoundEmail}}\",\r\n    \"new_password\": \"##Admin1234\",\r\n    \"retype_password\": \"##Admin1234\",\r\n    \"otp_code\": \"{{otpCodeAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Password with Valid Otp Code Nana",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"new_password\": \"##Admin1234\",\r\n    \"retype_password\": \"##Admin1234\",\r\n    \"otp_code\": \"{{otpCodeAdminNana}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Password with Valid Payload Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"new_password\": \"##Admin1234\",\r\n    \"retype_password\": \"##Admin1234\",\r\n    \"otp_code\": \"{{otpCodeAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Token with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Token with Valid Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{accessTokenAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin Token with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Admin successfully edited');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.access_token).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('accessTokenAdminFaris', responseJson.data.access_token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{refreshTokenAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin without Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin with Invalid Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\",\r\n    \"password\": \"##Admin12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\",\r\n    \"password\": \"##Admin1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Admin with Valid Payload and Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\",\r\n    \"password\": \"##Admin1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Admin with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Admin with Valid Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{accessTokenAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Admin with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{refreshTokenAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Admin without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Admin without Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshTokenAdminNana}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Admin with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminNana}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "[No Test] Requirements",
					"item": [
						{
							"name": "Send OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.environment.set('otpCodeUserNana', responseJson.data.otp_code);\r",
											"} catch (error) {\r",
											"  console.log(\"Error occurred: \" + error.message);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('emailUserNana', `sabnaamar${Date.now()}@gmail.com`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailUserNana}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/{{version}}/users/otp/register",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"{{version}}",
										"users",
										"otp",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add User Nana",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.environment.set('idUserNana', responseJson.data.user_id);\r",
											"} catch (error) {\r",
											"  console.log(\"Error occurred: \" + error.message);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"first_name\": \"Sabna\",\r\n    \"last_name\": \"Amar\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailUserNana}}\",\r\n    \"phone_number\": \"0123456789\",\r\n    \"otp_code\": \"{{otpCodeUserNana}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/{{version}}/users",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"{{version}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Reset Password OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.environment.set('otpCodeUserNana', responseJson.data.otp_code);\r",
											"} catch (error) {\r",
											"  console.log(\"Error occurred: \" + error.message);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailUserNana}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/{{version}}/users/otp/reset",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"{{version}}",
										"users",
										"otp",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login User Nana",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.environment.set('idUserNana', responseJson.data.user_id);\r",
											"    pm.environment.set('accessTokenUserNana', responseJson.data.access_token);\r",
											"    pm.environment.set('refreshTokenUserNana', responseJson.data.refresh_token);\r",
											"} catch (error) {\r",
											"    console.log(\"Error occurred: \" + error.message);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailUserNana}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/{{version}}/users/login",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"{{version}}",
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.environment.set('notFoundId', '12345678-abcd-dcba-1234-123456789abc');\r",
									"pm.environment.set('notFoundOtp', '123456');\r",
									"pm.environment.set('notFoundEmail', 'test@email.com');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Send OTP with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send OTP with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"\r",
									"  pm.expect(responseJson.status).to.equal('success');\r",
									"  pm.expect(responseJson.message).to.equal('OTP sent to email');\r",
									"  pm.expect(responseJson.data).to.have.property('otp_code');\r",
									"  pm.expect(responseJson.data.otp_code).to.be.a('number');\r",
									"\r",
									"  pm.environment.set('otpCodeUserFaris', responseJson.data.otp_code);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('emailUserFaris', `farismnrr${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Invalid OTP Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"otp_code\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Invalid Otp Code Credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"phone_number\": \"0123456789\",\r\n    \"otp_code\": \"{{notFoundOtp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Valid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('User successfully registered');\r",
									"    pm.expect(responseJson.data).to.have.property('user_id');\r",
									"    pm.expect(responseJson.data.user_id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.free_trial).to.be.a('boolean');\r",
									"\r",
									"    pm.environment.set('idUserFaris', responseJson.data.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"phone_number\": \"0123456789\",\r\n    \"otp_code\": \"{{otpCodeUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User with Invalid Email Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test.com\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"password\": \"*Test123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User with Not Found Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{notFoundEmail}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User with Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('User successfully logged in');\r",
									"    pm.expect(responseJson.data).to.have.property('user_id');\r",
									"    pm.expect(responseJson.data.user_id).to.be.a('string');\r",
									"    pm.expect(responseJson.data).to.have.property('access_token');\r",
									"    pm.expect(responseJson.data.access_token).to.be.a('string');\r",
									"    pm.expect(responseJson.data).to.have.property('refresh_token');\r",
									"    pm.expect(responseJson.data.refresh_token).to.be.a('string');\r",
									"    pm.environment.set('idUserFaris', responseJson.data.user_id);\r",
									"    pm.environment.set('accessTokenUserFaris', responseJson.data.access_token);\r",
									"    pm.environment.set('refreshTokenUserFaris', responseJson.data.refresh_token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Reset Password OTP with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Reset Password OTP with Not Found Otp Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{notFoundEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Reset Password OTP with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"  pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"\r",
									"  pm.expect(responseJson.status).to.equal('success');\r",
									"  pm.expect(responseJson.message).to.equal('OTP sent to email');\r",
									"  pm.expect(responseJson.data).to.have.property('otp_code');\r",
									"  pm.expect(responseJson.data.otp_code).to.be.a('number');\r",
									"\r",
									"  pm.environment.set('otpCodeUserFaris', responseJson.data.otp_code);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Password with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{notFoundEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Password with Invalid Otp Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"new_password\": \"##User1234\",\r\n    \"retype_password\": \"##User1234\",\r\n    \"otp_code\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Password with Invalid Otp Code Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"new_password\": \"##User1234\",\r\n    \"retype_password\": \"##User1234\",\r\n    \"otp_code\": \"{{notFoundOtp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Password with Not Found Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{notFoundEmail}}\",\r\n    \"new_password\": \"##User1234\",\r\n    \"retype_password\": \"##User1234\",\r\n    \"otp_code\": \"{{otpCodeUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Password with Valid Otp Code Nana",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"new_password\": \"##User1234\",\r\n    \"retype_password\": \"##User1234\",\r\n    \"otp_code\": \"{{otpCodeUserNana}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Password with Valid Payload Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"new_password\": \"##User1234\",\r\n    \"retype_password\": \"##User1234\",\r\n    \"otp_code\": \"{{otpCodeUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/reset",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Token with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Token with Valid Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{accessTokenUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Token with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"it should response 200 status code\", () => {\r",
									"  pm.expect(pm.response).to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"})\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"  pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"})\r",
									"\r",
									"pm.test(\"response body have correct property and value\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseJson.status).to.equal(\"success\");\r",
									"  pm.expect(responseJson.message).to.equal(\"User successfully edited\");\r",
									"  pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"  pm.expect(responseJson.data.access_token).to.be.a(\"string\");\r",
									"  \r",
									"  pm.environment.set(\"accessTokenUserFaris\", responseJson.data.access_token);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{refreshTokenUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User without Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User with Invalid Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\",\r\n    \"password\": \"##User12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\",\r\n    \"password\": \"##User1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User with Valid Payload and Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"farismnrr_{{$timestamp}}@gmail.com\",\r\n    \"phone_number\": \"0123456789\",\r\n    \"password\": \"##User1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User with Valid Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{accessTokenUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{refreshTokenUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/auth",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User without Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshTokenUserNana}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserNana}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Trial",
			"item": [
				{
					"name": "[No Test] Send OTP User Faris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('otpCodeUserFaris', responseJson.data.otp_code);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('emailUserFaris', `farismnrr${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Trial when Register User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('User successfully registered');\r",
									"    pm.expect(responseJson.data).to.have.property('user_id');\r",
									"    pm.expect(responseJson.data.user_id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.free_trial).to.be.true;\r",
									"\r",
									"    pm.environment.set('idUserFaris', responseJson.data.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"phone_number\": \"0123456789\",\r\n    \"otp_code\": \"{{otpCodeUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] Login User Faris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set('idUserFaris', responseJson.data.user_id);\r",
									"    pm.environment.set('accessTokenUserFaris', responseJson.data.access_token);\r",
									"    pm.environment.set('refreshTokenUserFaris', responseJson.data.refresh_token);\r",
									"} catch (error) {\r",
									"    console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Trial with Valid User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Trial fetched successfully');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.trial).to.be.an('object');\r",
									"    pm.expect(responseJson.data.trial.email).to.be.a('string');\r",
									"    pm.expect(responseJson.data.trial.free_trial).to.be.a('boolean');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/trials",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"trials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Trial with Valid User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/trials",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"trials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Trial with Used Trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/trials",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"trials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Trial with Used Trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Trial fetched successfully');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.trial).to.be.an('object');\r",
									"    pm.expect(responseJson.data.trial.email).to.be.a('string');\r",
									"    pm.expect(responseJson.data.trial.free_trial).to.be.a('boolean');\r",
									"    pm.expect(responseJson.data.trial.free_trial).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/trials",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"trials"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] Delete User Faris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] Send OTP User Faris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('otpCodeUserFaris', responseJson.data.otp_code);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Used Trial",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('User successfully registered');\r",
									"    pm.expect(responseJson.data).to.have.property('user_id');\r",
									"    pm.expect(responseJson.data.user_id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.free_trial).to.be.false;\r",
									"\r",
									"    pm.environment.set('idUserFaris', responseJson.data.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"phone_number\": \"0123456789\",\r\n    \"otp_code\": \"{{otpCodeUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] Login User Faris Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set('idUserFaris', responseJson.data.user_id);\r",
									"    pm.environment.set('accessTokenUserFaris', responseJson.data.access_token);\r",
									"    pm.environment.set('refreshTokenUserFaris', responseJson.data.refresh_token);\r",
									"} catch (error) {\r",
									"    console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Trial with Used Trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Trial fetched successfully');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.trial).to.be.an('object');\r",
									"    pm.expect(responseJson.data.trial.email).to.be.a('string');\r",
									"    pm.expect(responseJson.data.trial.free_trial).to.be.a('boolean');\r",
									"    pm.expect(responseJson.data.trial.free_trial).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/trials",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"trials"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[No Test] Requirements",
			"item": [
				{
					"name": "Send OTP Admin Nana",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('otpCodeAdminNana', responseJson.data.otp_code);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('emailAdminNana', `sabnaamar${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminNana}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin Nana",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('idAdminNana', responseJson.data.admin_id);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Sabna\",\r\n    \"last_name\": \"Amar\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailAdminNana}}\",\r\n    \"otp_code\": \"{{otpCodeAdminNana}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin Nana",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set('idAdminNana', responseJson.data.admin_id);\r",
									"    pm.environment.set('accessTokenAdminNana', responseJson.data.access_token);\r",
									"    pm.environment.set('refreshTokenAdminNana', responseJson.data.refresh_token);\r",
									"} catch (error) {\r",
									"    console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminNana}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send OTP Admin Faris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('otpCodeAdminFaris', responseJson.data.otp_code);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('emailAdminFaris', `farismnrr${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin Faris",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('idAdminFaris', responseJson.data.admin_id);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"otp_code\": \"{{otpCodeAdminFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin Faris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set('idAdminFaris', responseJson.data.admin_id);\r",
									"    pm.environment.set('accessTokenAdminFaris', responseJson.data.access_token);\r",
									"    pm.environment.set('refreshTokenAdminFaris', responseJson.data.refresh_token);\r",
									"} catch (error) {\r",
									"    console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailAdminFaris}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/admins/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send OTP User Faris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('otpCodeUserFaris', responseJson.data.otp_code);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('emailUserFaris', `farismnrr${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User Faris",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('idUserFaris', responseJson.data.user_id);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Faris Munir\",\r\n    \"last_name\": \"Mahdi\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"phone_number\": \"0123456789\",\r\n    \"otp_code\": \"{{otpCodeUserFaris}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User Faris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set('idUserFaris', responseJson.data.user_id);\r",
									"    pm.environment.set('accessTokenUserFaris', responseJson.data.access_token);\r",
									"    pm.environment.set('refreshTokenUserFaris', responseJson.data.refresh_token);\r",
									"} catch (error) {\r",
									"    console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserFaris}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send OTP User Nana",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('otpCodeUserNana', responseJson.data.otp_code);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('emailUserNana', `sabnaamar${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserNana}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/otp/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"otp",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User Nana",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set('idUserNana', responseJson.data.user_id);\r",
									"} catch (error) {\r",
									"  console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"first_name\": \"Sabna\",\r\n    \"last_name\": \"Amar\",\r\n    \"password\": \"*Test12345\",\r\n    \"retype_password\": \"*Test12345\",\r\n    \"email\": \"{{emailUserNana}}\",\r\n    \"phone_number\": \"0123456789\",\r\n    \"otp_code\": \"{{otpCodeUserNana}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User Nana",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set('idUserNana', responseJson.data.user_id);\r",
									"    pm.environment.set('accessTokenUserNana', responseJson.data.access_token);\r",
									"    pm.environment.set('refreshTokenUserNana', responseJson.data.refresh_token);\r",
									"} catch (error) {\r",
									"    console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailUserNana}}\",\r\n    \"password\": \"*Test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/users/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Add Product without Authorization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get(\"url\");\r",
									"const port = pm.environment.get(\"port\");\r",
									"const version = pm.environment.get(\"version\");\r",
									"\r",
									"const products = [\r",
									"    {\r",
									"        \"product_name\": \"Standard Plan\",\r",
									"        \"description\": \"Standard package providing access to the IoT platform for 3 months.\",\r",
									"        \"price\": 200000,\r",
									"        \"duration\": \"3 months\"\r",
									"    },\r",
									"    {\r",
									"        \"product_name\": \"Premium Plan\",\r",
									"        \"description\": \"Premium package providing full access to the IoT platform for 6 months.\",\r",
									"        \"price\": 300000,\r",
									"        \"duration\": \"6 months\"\r",
									"    },\r",
									"];\r",
									"\r",
									"products.forEach((product) => {\r",
									"    const requestParams = {\r",
									"        url: `${url}:${port}/${version}/products`,\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\",\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessTokenAdminFaris\")}`\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify(product),\r",
									"        },\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestParams, (_, error) => {\r",
									"        if (error) {\r",
									"            console.error(error);\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 100000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with User Authorization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get(\"url\");\r",
									"const port = pm.environment.get(\"port\");\r",
									"const version = pm.environment.get(\"version\");\r",
									"\r",
									"const products = [\r",
									"    {\r",
									"        \"product_name\": \"Standard Plan\",\r",
									"        \"description\": \"Standard package providing access to the IoT platform for 3 months.\",\r",
									"        \"price\": 200000,\r",
									"        \"duration\": \"3 months\"\r",
									"    },\r",
									"    {\r",
									"        \"product_name\": \"Premium Plan\",\r",
									"        \"description\": \"Premium package providing full access to the IoT platform for 6 months.\",\r",
									"        \"price\": 300000,\r",
									"        \"duration\": \"6 months\"\r",
									"    },\r",
									"];\r",
									"\r",
									"products.forEach((product) => {\r",
									"    const requestParams = {\r",
									"        url: `${url}:${port}/${version}/products`,\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\",\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessTokenAdminFaris\")}`\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify(product),\r",
									"        },\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestParams, (_, error) => {\r",
									"        if (error) {\r",
									"            console.error(error);\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 100000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Valid Refresh Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get(\"url\");\r",
									"const port = pm.environment.get(\"port\");\r",
									"const version = pm.environment.get(\"version\");\r",
									"\r",
									"const products = [\r",
									"    {\r",
									"        \"product_name\": \"Standard Plan\",\r",
									"        \"description\": \"Standard package providing access to the IoT platform for 3 months.\",\r",
									"        \"price\": 200000,\r",
									"        \"duration\": \"3 months\"\r",
									"    },\r",
									"    {\r",
									"        \"product_name\": \"Premium Plan\",\r",
									"        \"description\": \"Premium package providing full access to the IoT platform for 6 months.\",\r",
									"        \"price\": 300000,\r",
									"        \"duration\": \"6 months\"\r",
									"    },\r",
									"];\r",
									"\r",
									"products.forEach((product) => {\r",
									"    const requestParams = {\r",
									"        url: `${url}:${port}/${version}/products`,\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\",\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessTokenAdminFaris\")}`\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify(product),\r",
									"        },\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestParams, (_, error) => {\r",
									"        if (error) {\r",
									"            console.error(error);\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 100000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get(\"url\");\r",
									"const port = pm.environment.get(\"port\");\r",
									"const version = pm.environment.get(\"version\");\r",
									"\r",
									"const products = [\r",
									"    {\r",
									"        \"product_name\": \"Standard Plan\",\r",
									"        \"description\": \"Standard package providing access to the IoT platform for 3 months.\",\r",
									"        \"price\": 200000,\r",
									"        \"duration\": \"3 months\"\r",
									"    },\r",
									"    {\r",
									"        \"product_name\": \"Premium Plan\",\r",
									"        \"description\": \"Premium package providing full access to the IoT platform for 6 months.\",\r",
									"        \"price\": 300000,\r",
									"        \"duration\": \"6 months\"\r",
									"    },\r",
									"];\r",
									"\r",
									"products.forEach((product) => {\r",
									"    const requestParams = {\r",
									"        url: `${url}:${port}/${version}/products`,\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\",\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessTokenAdminFaris\")}`\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify(product),\r",
									"        },\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestParams, (_, error) => {\r",
									"        if (error) {\r",
									"            console.error(error);\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Valid Payload and Admin Faris Authorization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Product added successfully');\r",
									"    pm.expect(responseJson.data).to.have.property('product_id');\r",
									"    pm.expect(responseJson.data.product_id).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('idProduct', responseJson.data.product_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 100000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Valid Payload and Admin Nana Authorization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get(\"url\");\r",
									"const port = pm.environment.get(\"port\");\r",
									"const version = pm.environment.get(\"version\");\r",
									"\r",
									"const product = {\r",
									"    \"product_name\": \"Premium Plan\",\r",
									"    \"description\": \"Premium package providing full access to the IoT platform for 6 months.\",\r",
									"    \"price\": 300000,\r",
									"    \"duration\": \"6 months\"\r",
									"};\r",
									"\r",
									"const requestParams = {\r",
									"    url: `${url}:${port}/${version}/products`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",\r",
									"        \"Authorization\": `Bearer ${pm.environment.get(\"accessTokenAdminFaris\")}`\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify(product),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(requestParams, (_, error) => {\r",
									"    if (error) {\r",
									"        console.error(error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Product added successfully');\r",
									"    pm.expect(responseJson.data).to.have.property('product_id');\r",
									"    pm.expect(responseJson.data.product_id).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('idProduct', responseJson.data.product_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminNana}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Standard Plan\",\r\n    \"description\": \"Standard package providing access to the IoT platform for 3 months.\",\r\n    \"price\": 200000,\r\n    \"duration\": \"3 months\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.products).to.be.an('array');\r",
									"    pm.expect(responseJson.data.products.length).to.be.above(2); // at least 3 products\r",
									"\r",
									"    responseJson.data.products.forEach((product) => {\r",
									"        pm.expect(product).to.be.an('object');\r",
									"        pm.expect(product.id).to.be.a('string');\r",
									"        pm.expect(product.product_name).to.be.a('string');\r",
									"        pm.expect(product.description).to.be.a('string');\r",
									"        pm.expect(product.price).to.be.a('number');\r",
									"        pm.expect(product.duration).to.be.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product with Not Found Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{notFoundId}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{notFoundId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.product).to.be.an('object');\r",
									"\r",
									"    pm.expect(responseJson.data.product.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.product.product_name).to.be.a('string');\r",
									"    pm.expect(responseJson.data.product.description).to.be.a('string');\r",
									"    pm.expect(responseJson.data.product.price).to.be.a('number');\r",
									"    pm.expect(responseJson.data.product.duration).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Product without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 110000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Product with User Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 110000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Product with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 110000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Product with Not Found Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 110000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{notFoundId}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{notFoundId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Product with Valid Admin Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Basic Plan\",\r\n    \"description\": \"Basic package providing access to the IoT platform for 1 month.\",\r\n    \"price\": 110000,\r\n    \"duration\": \"1 month\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with User Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with Not Found Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{notFoundId}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{notFoundId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with Valid Product Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Item",
			"item": [
				{
					"name": "Add Item without Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"VIRTUAL_DIGITAL_PIN_1_{{$timestamp}}\",\r\n    \"pin_type\": \"digital\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Item with User Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"VIRTUAL_DIGITAL_PIN_1_{{$timestamp}}\",\r\n    \"pin_type\": \"digital\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Item with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Item with Valid Payload and Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Item created successfully');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.item_id).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('idItem', responseJson.data.item_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"VIRTUAL_DIGITAL_PIN_1_{{$timestamp}}\",\r\n    \"pin_type\": \"digital\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body \"data\" property should have an \"items\" property that is an array', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data).to.have.property('items').that.is.an('array');\r",
									"});\r",
									"\r",
									"pm.test('each item in \"items\" array should have \"id\", \"name\", and \"pin_type\" properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    responseJson.data.items.forEach((item) => {\r",
									"        pm.expect(item).to.have.property('id').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('pin_type').that.is.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Item with Not Found Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{notFoundId}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{notFoundId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Item with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body \"data\" property \"item\" object should have \"id\", \"name\", and \"pin_type\" properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.item).to.have.property('id').that.is.a('string');\r",
									"    pm.expect(responseJson.data.item).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(responseJson.data.item).to.have.property('pin_type').that.is.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{idItem}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{idItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Item without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"VIRTUAL_DIGITAL_PIN_2_{{$timestamp}}\",\r\n    \"pin_type\": \"digital\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{idItem}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{idItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Item with User Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"VIRTUAL_DIGITAL_PIN_2_{{$timestamp}}\",\r\n    \"pin_type\": \"digital\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{idItem}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{idItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Item with Not Found Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"VIRTUAL_DIGITAL_PIN_2_{{$timestamp}}\",\r\n    \"pin_type\": \"digital\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{notFoundId}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{notFoundId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Item with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{idItem}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{idItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Item with Valid Payload and Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"VIRTUAL_DIGITAL_PIN_2_{{$timestamp}}\",\r\n    \"pin_type\": \"digital\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{idItem}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{idItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{idItem}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{idItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item with User Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{idItem}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{idItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item with Not Found Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{notFoundId}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{notFoundId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item with Valid Id and Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/items/{{idItem}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"items",
								"{{idItem}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "[No Test] Add Products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set('idProduct', responseJson.data.product_id);\r",
									"} catch (error) {\r",
									"    console.log(\"Error occurred: \" + error.message);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminNana}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_name\": \"Standard Plan\",\r\n    \"description\": \"Standard package providing access to the IoT platform for 3 months.\",\r\n    \"price\": 200000,\r\n    \"duration\": \"3 months\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/products",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order with Not Found Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{notFoundId}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{notFoundId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order with Valid User Id and Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Order created successfully');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.user_id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.product_id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.status).to.equal('pending');\r",
									"    pm.expect(responseJson.data.token).to.be.a('string');\r",
									"    pm.expect(responseJson.data.payment_url).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('idOrder', responseJson.data.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{idOrder}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{idOrder}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order with Admin Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdminFaris}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{idOrder}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{idOrder}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order with User Nana Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserNana}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{idOrder}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{idOrder}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order with Not Found Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{notFoundId}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{notFoundId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Manual Test] Get Order with pending status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Order fetched successfully');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.token).to.be.a('string');\r",
									"    pm.expect(responseJson.data.redirect_url).to.be.a('string');\r",
									"    pm.expect(responseJson.data.transaction_status).to.equal('pending');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{idOrder}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{idOrder}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Manual Test] Get Order with paid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Order fetched successfully');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"\r",
									"    if (responseJson.data.transaction_status === 'pending'){\r",
									"        pm.expect(responseJson.data.token).to.be.a('string');\r",
									"        pm.expect(responseJson.data.redirect_url).to.be.a('string');\r",
									"        pm.expect(responseJson.data.transaction_status).to.equal('pending');\r",
									"    } else {\r",
									"        pm.expect(responseJson.data.product).to.be.an('object');\r",
									"        pm.expect(responseJson.data.product.id).to.be.a('string');\r",
									"        pm.expect(responseJson.data.product.product_name).to.be.a('string');\r",
									"        pm.expect(responseJson.data.product.description).to.be.a('string');\r",
									"        pm.expect(responseJson.data.product.price).to.be.a('number');\r",
									"        pm.expect(responseJson.data.product.duration).to.be.a('string');\r",
									"\r",
									"        pm.expect(responseJson.data.subscription).to.be.an('object');\r",
									"        pm.expect(responseJson.data.subscription.id).to.be.a('string');\r",
									"        pm.expect(responseJson.data.subscription.user_id).to.be.a('string');\r",
									"        pm.expect(responseJson.data.subscription.product_id).to.be.a('string');\r",
									"        pm.expect(responseJson.data.subscription.trial_id).to.be.null;\r",
									"        pm.expect(responseJson.data.subscription.api_key).to.be.a('string');\r",
									"        pm.expect(responseJson.data.subscription.subscription_start_date).to.be.a('string');\r",
									"        pm.expect(responseJson.data.subscription.subscription_end_date).to.be.a('string');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{idOrder}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{idOrder}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Manual Test] Create Order with Actived Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/{{idProduct}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] Get Order Subscription",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserFaris}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}:{{port}}/{{version}}/orders/subscription",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"orders",
								"subscription"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.environment.set('notFoundId', '12345678-abcd-dcba-1234-123456789abc');\r",
					"pm.environment.set('notFoundOtp', '123456');\r",
					"pm.environment.set('notFoundEmail', 'test@email.com');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}